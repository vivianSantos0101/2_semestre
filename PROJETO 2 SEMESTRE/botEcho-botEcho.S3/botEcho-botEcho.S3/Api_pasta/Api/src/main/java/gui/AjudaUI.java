/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gui;

import java.awt.Color;
import javax.swing.JFrame;

/**
 *
 * @author Ryan
 */
public class AjudaUI extends javax.swing.JPanel {

    /**
     * Creates new form AjudaUI
     */
    public AjudaUI() {
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();

        setForeground(new java.awt.Color(60, 60, 60));

        jEditorPane1.setEditable(false);
        jEditorPane1.setBorder(null);
        jEditorPane1.setContentType("text/html"); // NOI18N
        jEditorPane1.setForeground(new java.awt.Color(60, 60, 60));
        jEditorPane1.setText("<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <style>\n        body{\n            background-color: rgb(43,43,43);\n            margin: 0;\n            padding: 0px 4px 10px 4px;\n        }\n        h1{\n            color: rgb(219, 219, 219);\n        }\n        h2{\n            color: rgb(219, 219, 219);\n        }\n        h3{\n            color: rgb(219, 219, 219);\n        }\n        h4{\n            color: rgb(219, 219, 219);\n        }\n        h5{\n            color: rgb(219, 219, 219);\n        }\n        p{\n            color: rgb(211, 211, 211);\n            margin: 1px 0px 1px 0px;\n        }\n        p.codigo{\n            background-color: gray;\n            padding: 4px 4px 4px 10px;\n            border: 3px solid rgb(68, 68, 68);\n            border-radius: 10px;\n        }\n    </style>\n</head>\n<body>  \n<h2>Como fazer uma plot</h2>\n<br>\n<p class=\"codigo\">import matplotlib.pyplot as plt</p>\n<p>Essa linha importa a biblioteca matplotlib.pyplot com o apelido plt. Essa parte da biblioteca é usada para criar gráficos de forma simples.</p>\n<br>\n\n<p class=\"codigo\">x = [0, 100]</p>\n<p>Aqui você está criando uma lista chamada x com dois valores: 0 e 100. Esses valores vão ser usados como dados para o gráfico.</p>\n<br>\n\n<p class=\"codigo\">plt.plot(x, label='Linha de 0 a 100')</p>\n<p>Essa linha cria um gráfico de linha com os dados da lista x. Como não foi passada uma lista de valores para o eixo X, o Matplotlib usa os índices da lista automaticamente <br> (ou seja, 0 e 1).  O texto em label='Linha de 0 a 100' serve para nomear essa linha, e será mostrado na legenda.</p>\n<br>\n\n<p class=\"codigo\">plt.title('Linha do ponto (0,0) até (100,100)')</p>\n<p>Define o título do gráfico.</p>\n<br>\n\n<p class=\"codigo\">plt.xlabel('Eixo X') <br> \nplt.ylabel('Eixo Y')</p>\n<p>Essas duas linhas definem os nomes dos eixos horizontal (X) e vertical (Y).</p>\n<br>\n\n<p class=\"codigo\">plt.legend()</p>\n<p>Exibe a legenda do gráfico, usando o nome que você deu com o label na linha do gráfico.</p>\n<br>\n\n<p class=\"codigo\">plt.grid(True)</p>\n<p>Adiciona uma grade (linhas de fundo) ao gráfico para facilitar a leitura dos valores.</p>\n<br>\n\n<p class=\"codigo\">plt.show()</p>\n<p>Exibe o gráfico na tela. Essa linha é obrigatória para mostrar o gráfico final.</p>\n<br>\n\n<h2>Outros tipos de gráficos no Matplotlib</h2>\n\n<h3>Gráfico de pizza (pie chart)</h3>\n\n<p class=\"codigo\">import matplotlib.pyplot as plt<br>\nvalores = [30, 25, 45]<br>\ncategorias = ['Python', 'Java', 'C++']<br>\nplt.pie(valores, labels=categorias, autopct='%1.1f%%', startangle=90)<br>\nplt.title('Preferência por linguagens de programação')<br>\nplt.axis('equal')<br>\nplt.show()</p>\n<p>Esse código cria um gráfico de pizza com três categorias. A função <code>autopct</code> mostra as porcentagens. <code>startangle=90</code> muda o ângulo inicial para que o gráfico comece de cima. <code>axis('equal')</code> deixa o gráfico perfeitamente circular.</p>\n<br>\n\n<h3>Gráfico de barras (barra vertical)</h3>\n\n<p class=\"codigo\">import matplotlib.pyplot as plt <br>\nlinguagens = ['Python', 'Java', 'C++']<br>\nquantidades = [30, 25, 45]<br>\nplt.bar(linguagens, quantidades, color='skyblue')<br>\nplt.title('Quantidade de projetos por linguagem')<br>\nplt.xlabel('Linguagens')<br>\nplt.ylabel('Projetos')<br>\nplt.grid(True)<br>\nplt.show()</p>\n<p>Esse gráfico mostra barras verticais, onde cada barra representa a quantidade de projetos em cada linguagem. Você pode mudar as cores e o estilo conforme quiser.</p>\n<br>\n\n<h3>Gráfico com imagem (usando imshow)</h3>\n\n<p class=\"codigo\">import matplotlib.pyplot as plt<br>\nimport numpy as np<br>\nimagem = np.random.rand(10, 10)<br>\nplt.imshow(imagem, cmap='gray')<br>\nplt.title('Imagem gerada aleatoriamente')<br>\nplt.colorbar()<br>\nplt.show()</p>\n<p>Esse código cria uma imagem aleatória usando uma matriz de valores com 10 linhas e 10 colunas. A função <code>imshow</code> mostra a matriz como se fosse uma imagem em tons de cinza, e <code>colorbar</code> mostra a escala dos valores ao lado.</p>\n\n</body>\n</html>");
        jScrollPane2.setViewportView(jEditorPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 369, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 569, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
